%%% Procedure which facilitates the plotting of scatter plots of all
	%	locations generated by locations.m.
	% 
	% plot_scatter.m is called successively 
	% for the a particular variable at all $Nlocs locations.
% ======================================================================

% $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%% Run startup.m, locations.m and DO NOT clear variables
%%
%% Requires: 
%%	X (Ntime x Nlat x Nlon), the independent variable.
%%	Z (Ntime x Nlat x Nlon),the dependent varaible.
%%	xvals, range of the x-axis ($Nlocs x 2) or (1 x 2).
%%	yvals, range of the y-axis ($Nlocs x 2) or (1 x 2).
%%  note_eval, string to evaluate for on-plot annotation:
%%							note that X (Ntime x Nlat x Nlon) --> x (Ntime),
%%												Z (Ntime x Nlat x Nlon) --> z (Ntime),
%%												il is the location index,
%%												ilat and  ilon are the (lat,lon) indices.
%%  note_before, string for on-plot annotation which comes before
%%								note_eval.
%%	name		 , string for output file.
%%  opt_line , NEW! set =1 to add a line for guidance
% $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

	% in case opt_line is not defined
if ~exist('opt_line_slope')
	opt_line_slope=[];
end

for il=1:Nlocs		% looping through the locations
	
		% squeezing ilocs at location $il
	ilon = ilocs(il,1);
	ilat = ilocs(il,2);		

		% squeezing X and Z at location $il
	x = sqz(X(:,ilat,ilon));
	z = sqz(Z(:,ilat,ilon));
	
%		% in case some grid point blew up		--- Do I need this ?
%	nogood = find(z>1e2); z(nogood) = NaN;

		% output name for location $il
	if il<10
		name1 = ['0' num2str(il) '_' name];
	else
		name1 = [num2str(il) '_' name];
	end
	
		% if tsvals is a vector, squeeze at entry $il
	if size(xvals,1)>1
		xval = sqz(xvals(il,:));
	else
		xval = xvals;
	end
		
		% if yvals is a vector, squeeze at entry $il
	if size(yvals,1)>1
		yval = sqz(yvals(il,:));
	else
		yval = yvals;
	end

		% if non-empty, evaluating note_eval and cat with note_before
	if ~isempty(note_eval) && ~isempty(note_before)
		eval(['note = ', note_eval ';']);
		note = [note_before,note];
		
		%% Generalize for non-singleton note_eval ...

	else
		note = [];
	end

		%% Call plot_ts.m
	plot_scatter(x,z,xval,yval,name1,note,opt_line_slope);

end; 

clear il x z name1 note xval yval
%clear Z Zbar sig_Z name
% ======================================================================

